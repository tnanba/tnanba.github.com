<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pik | トカゲのチラシの裏]]></title>
  <link href="http://tnanba.github.com/blog/categories/pik/atom.xml" rel="self"/>
  <link href="http://tnanba.github.com/"/>
  <updated>2012-04-10T01:44:37+09:00</updated>
  <id>http://tnanba.github.com/</id>
  <author>
    <name><![CDATA[NANBA Toshiaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[pik環境へのDevKitインストール]]></title>
    <link href="http://tnanba.github.com/blog/2012/04/06/devkit-on-pik/"/>
    <updated>2012-04-06T02:35:00+09:00</updated>
    <id>http://tnanba.github.com/blog/2012/04/06/devkit-on-pik</id>
    <content type="html"><![CDATA[<h1>DevKitのインストール</h1>

<p>Vagrantが依存するgemの中にコンパイルを必要とするものがあるため、DevKitをインストールしておく必要がある。</p>

<ul>
<li><a href="http://rubyinstaller.org/add-ons/devkit/">DevKit</a></li>
<li><a href="https://github.com/oneclick/rubyinstaller/wiki/Development-Kit">Development Kit · oneclick/rubyinstaller Wiki</a></li>
</ul>


<h2>ファイルの用意</h2>

<p><a href="http://rubyinstaller.org/downloads/">ダウンロードページ</a>から、自己解凍型のファイル(DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe)をダウンロードする。ダウンロードしたファイルを実行すると解凍先を聞かれるので適当に指定する。このとき指定したフォルダに全ファイルがそのまま展開されてしまうので、空のフォルダを作ってそこに展開した方がいい。</p>

<p>展開されたすべてのファイルをまとめて適当なフォルダに移動しておく → とりあえず C:\dev\DevKit-tdm-32-4.5.2 へ。</p>

<h2>インストールスクリプトの実行</h2>

<p>DevKitファイルを移動した先のフォルダでコマンドを実行する。</p>

<pre><code>$ ruby dk.rb init
</code></pre>

<p>config.ymlファイルができあがるけど中身が空なので、pikでインストールしたrubyのパスを追記する。</p>

<pre><code>- C:\Users\ユーザ名\.pik\rubies\Ruby-193-p125
</code></pre>

<p>後は内容をチェックして問題なければインストールして完了。</p>

<pre><code>$ ruby dk.rb review
$ ruby dk.rc install
</code></pre>

<h2>DevKitの動作確認</h2>

<p><a href="https://github.com/oneclick/rubyinstaller/wiki/Development-Kit">DevKitのページ</a>に書いてあるサンプルを動かしてみて、正しくインストールされているかどうかを確認する。</p>

<pre><code>$ gem install rdiscount --platform=ruby
Fetching: rdiscount-1.6.8.gem (100%)
Temporarily enhancing PATH to include DevKit...
Building native extensions.  This could take a while...
Successfully installed rdiscount-1.6.8
1 gem installed
Installing ri documentation for rdiscount-1.6.8...
Installing RDoc documentation for rdiscount-1.6.8...
</code></pre>

<p>"Temporarily enhancing PATH to include DevKit..."というメッセージが表示されていれば、DevKitが正常に動いているはず。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pikによるrubyインストール]]></title>
    <link href="http://tnanba.github.com/blog/2012/04/06/pik-on-windows/"/>
    <updated>2012-04-06T02:13:00+09:00</updated>
    <id>http://tnanba.github.com/blog/2012/04/06/pik-on-windows</id>
    <content type="html"><![CDATA[<h1>pikを動作させる</h1>

<p>msiからpikをインストールして実行してみるとなぜかうまく動かない。</p>

<pre><code>C:\dev\pik&gt;pik list

There was an error.
 Error: can't dup NilClass

  in: pathname.rb:205:in `dup'
  in: pathname.rb:205:in `initialize'
  in: pik/commands/add_command.rb:17:in `new'
  in: pik/commands/add_command.rb:17:in `add'
  in: pik/commands/add_command.rb:13:in `execute'
  in: pik_runner:27
</code></pre>

<p>調べたところ、rubyが全くない環境で動かすと発生するらしい → <a href="http://d.hatena.ne.jp/miau/20110106/1294325095">pik を使って Windows に ruby をインストール - miauの避難所</a></p>

<p>rubyをインストールすれば回避できるらしいが、そもそもpikを使ってrubyをインストールしようとしているのに、それを動かすためにrubyが必要というのでは本末転倒なので、違う方法での回避を試みる。</p>

<p>回避方法も上のページに書いてある。ダミーのエントリを作って、1つでもrubyがインストールされているように見せかければよいらしい。</p>

<p>%HOME%/.pik/config.ymlを作成してダミーを作成しておく。</p>

<pre><code>---
"000: ruby 0.0.0 (dummy ruby for pik)":
  :path: !ruby/object:Pathname
    path: C:/pik/dummy
--- {}
</code></pre>

<p>これでpikが動くようになる。</p>

<hr />

<h1>rubyインストール</h1>

<p>pikが動作するようになったので、pik経由でrubyをインストールする。現時点での最新の安定版1.9.3-p125を入れる。</p>

<pre><code>$ pik install ruby 1.9.3-p125
</code></pre>

<p>インストールが完了したらconfig.ymlを編集してダミーのエントリを削除しておく。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WindowsへのRuby環境構築]]></title>
    <link href="http://tnanba.github.com/blog/2012/04/05/ruby-on-windows/"/>
    <updated>2012-04-05T03:32:00+09:00</updated>
    <id>http://tnanba.github.com/blog/2012/04/05/ruby-on-windows</id>
    <content type="html"><![CDATA[<p>VagrantにCentOSのboxを作成したいけれども、一からやるよりはveeweeというのを使った方がよさそう？</p>

<ul>
<li><a href="http://d.hatena.ne.jp/okinaka/20110903/1315034637">veewee で vagrant 用の仮想サーバ(box)を自動作成 - エンジニアきまぐれTips</a></li>
<li><a href="http://d.hatena.ne.jp/Hirohiro/20120122/1327238450">Vagrant &amp; VeeWee を再設定してCentOS 6.2のBoxを作成してみた - Hirohiroの日記</a></li>
</ul>


<p>でもvagrant/veeweeともrubyなので、まずはWindowsにrubyの環境を構築する。</p>

<hr />

<h1>RVM on Windows</h1>

<ul>
<li><a href="https://rvm.beginrescueend.com/">RVM: Ruby Version Manager - RVM Ruby Version Manager - Documentation</a></li>
</ul>


<p>Windows環境へのインストール方法の記述がない。と思ったらFAQに記述があった。</p>

<ul>
<li><a href="http://beginrescueend.com/support/faq/">RVM: Ruby Version Manager - RVM Frequently Asked Questions</a></li>
</ul>


<blockquote><p>Does RVM work on windows? Will it in the future?</p>

<p>NO. If you would like to manage multiple versions of ruby on windows please use pik which is an excellent tool by Gordon Thiesfeld. You can find it on GitHub.</p></blockquote>

<p>WindowsではRVMは動かないらしいので、pikを調べてみる。</p>

<hr />

<h1>pik on Windows</h1>

<ul>
<li><a href="https://github.com/vertiginous/pik/">vertiginous/pik</a></li>
<li><a href="http://yakinikunotare.boo.jp/orebase/index.php?Ruby%2FWindows7%A4%C71.8%A4%C81.9%B4%C4%B6%AD%A4%F2%C6%B1%B5%EF%A4%B5%A4%BB%A4%EB">Ruby/Windows7で1.8と1.9環境を同居させる - 俺の基地</a></li>
<li><a href="http://cyberwave.jp/nashiki/2010/05/windows%E3%81%AB%E3%81%A6%E3%80%81%E8%A4%87%E6%95%B0%E3%81%AEruby%E7%92%B0%E5%A2%83%E3%82%92%E5%85%B1%E5%AD%98%E3%81%95%E3%81%9B%E3%82%88%E3%81%86%EF%BC%81/]">pikで簡単、複数のRuby環境構築！ » 梨木を読む</a></li>
</ul>


<p>ダウンロードページからpik-0.2.8.msiを入手してインストールする。ディレクトリはc:\dev\pikに変更。</p>
]]></content>
  </entry>
  
</feed>
